Description,Target,Expression
,is_joint,(df.number_of_participants > 1)
,is_indiv,(df.number_of_participants == 1)
,is_atwork_subtour,~df.parent_tour_id.isnull()
,tour_type,"df.get('tour_type', default='work')"
#,,
#atwork subtours,,
#FIXME tripModeChoice uec wrongly conflates these with tour_mode_is_bike?,,
,parent_tour_mode,"reindex(tours.tour_mode, df.parent_tour_id).fillna('')"
,work_tour_is_SOV,parent_tour_mode.isin(['DRIVEALONEFREE'])
,work_tour_is_bike,parent_tour_mode=='BIKE'
#,,
,i_tour_mode,df.tour_mode.map(I_MODE_MAP)
,tour_mode_is_SOV,i_tour_mode.isin(I_SOV_MODES)
,tour_mode_is_SR2,i_tour_mode.isin(I_SR2_MODES)
,tour_mode_is_SR3P,i_tour_mode.isin(I_SR3P_MODES)
,tour_mode_is_auto,i_tour_mode.isin(I_AUTO_MODES)
,tour_mode_is_walk,i_tour_mode == I_WALK_MODE
,tour_mode_is_bike,i_tour_mode == I_BIKE_MODE
,tour_mode_is_walk_transit,i_tour_mode.isin(I_WALK_TRANSIT_MODES)
,tour_mode_is_drive_transit,i_tour_mode.isin(I_DRIVE_TRANSIT_MODES)
,tour_mode_is_ride_hail,i_tour_mode.isin(I_RIDE_HAIL_MODES)
#,,
,inbound,~df.outbound
,first_trip,df.trip_num == 1
,last_trip,df.trip_num == df.trip_count
origin terminal time not counted at home,_origin_terminal_time,"np.where(df.outbound & first_trip, 0, reindex(land_use.TERMINAL, df[ORIGIN]))"
dest terminal time not counted at home,_dest_terminal_time,"np.where(inbound & last_trip, 0, reindex(land_use.TERMINAL, df[DESTINATION]))"
,total_terminal_time,_origin_terminal_time + _dest_terminal_time
#,,
,free_parking_available,(df.tour_type == 'work') & df.free_parking_at_work
,dest_hourly_peak_parking_cost,"reindex(land_use.PRKCST, df[DESTINATION])"
,origin_hourly_peak_parking_cost,"reindex(land_use.PRKCST, df[ORIGIN])"
,origin_duration,"np.where(first_trip, np.where(inbound,df.duration * ~free_parking_available,0), 1)"
,dest_duration,"np.where(last_trip, np.where(inbound, df.duration * ~free_parking_available, 0), 1)"
,origin_parking_cost,origin_duration*origin_hourly_peak_parking_cost
,dest_parking_cost,dest_duration*dest_hourly_peak_parking_cost
,total_parking_cost,(origin_parking_cost + dest_parking_cost) / 2.0
,trip_topology,"np.where(df.outbound, reindex(land_use.TOPOLOGY, df[DESTINATION]), reindex(land_use.TOPOLOGY, df[ORIGIN]))"
,density_index,"np.where(df.outbound, reindex(land_use.density_index, df[DESTINATION]), reindex(land_use.density_index, df[ORIGIN]))"
,origin_density_index,"np.where(df.outbound, reindex(land_use.density_index, df[ORIGIN]), reindex(land_use.density_index, df[DESTINATION]))"
# cost coef,,
,income_exponent,"np.where(tour_type == 'work', 0.6, 0.5)"
,c_cost,"coef_inc_adj_cost / (np.maximum(df.income,1000)**income_exponent)"
# ivt coef,,
,time_factor,"np.where(tour_type=='work', df.time_factor_work, df.time_factor_nonwork)"
,c_ivt,coef_ivt * time_factor
#,,
,vot_da,c_ivt / c_cost * 0.6
,vot_s2,vot_da / cost_share_s2
,vot_s3,vot_da / cost_share_s3
,vot_trn,c_ivt / c_cost * 0.6
,_vot_bin_da,"np.where(vot_da < vot_threshold_low, 1, np.where(vot_da < vot_threshold_med, 2, 3))"
,_vot_bin_s2,"np.where(vot_s2 < vot_threshold_low, 1, np.where(vot_s2 < vot_threshold_med, 2, 3))"
,_vot_bin_s3,"np.where(vot_s3 < vot_threshold_low, 1, np.where(vot_s3 < vot_threshold_med, 2, 3))"
,_vot_bin_trn,"np.where(vot_trn < vot_threshold_low, 1, np.where(vot_trn < vot_threshold_med, 2, 3))"
# auto skims,,
,da_dist_skims,(((odt_skims['SOV_DIST_L']) * (_vot_bin_da == 1)) + ((odt_skims['SOV_DIST_M']) * (_vot_bin_da == 2)) + ((odt_skims['SOV_DIST_H']) * (_vot_bin_da == 3)))
,da_vtoll_skims,(((odt_skims['SOVTOLL_VTOLL_L']) * (_vot_bin_da == 1)) + ((odt_skims['SOVTOLL_VTOLL_M']) * (_vot_bin_da == 2)) + ((odt_skims['SOVTOLL_VTOLL_H']) * (_vot_bin_da == 3)))
,da_time_skims,(((odt_skims['SOV_TIME_L']) * (_vot_bin_da == 1)) + ((odt_skims['SOV_TIME_M']) * (_vot_bin_da == 2)) + ((odt_skims['SOV_TIME_H']) * (_vot_bin_da == 3)))
,s2_dist_skims,(((odt_skims['HOV2_DIST_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_DIST_M']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_DIST_H']) * (_vot_bin_s2 == 3)))
,s2_vtoll_skims,(((odt_skims['HOV2TOLL_VTOLL_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2TOLL_VTOLL_M']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2TOLL_VTOLL_H']) * (_vot_bin_s2 == 3)))
,s2_time_skims,(((odt_skims['HOV2_TIME_L']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_TIME_M']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_TIME_H']) * (_vot_bin_s2 == 3)))
,s3_dist_skims,(((odt_skims['HOV3_DIST_L']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3_DIST_M']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_DIST_H']) * (_vot_bin_s3 == 3)))
,s3_vtoll_skims,(((odt_skims['HOV3TOLL_VTOLL_L']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3TOLL_VTOLL_M']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3TOLL_VTOLL_H']) * (_vot_bin_s3 == 3)))
,s3_time_skims,(((odt_skims['HOV3_TIME_L']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3_TIME_M']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_TIME_H']) * (_vot_bin_s3 == 3)))
#,,
,sov_available,da_time_skims>0
,hov2_available,s2_time_skims>0
,hov3_available,s3_time_skims>0
,_origin_distance_to_transit,"reindex(land_use.access_dist_transit, df[ORIGIN]) if 'access_dist_transit' in land_use else shortWalk"
,_destination_distance_to_transit,"reindex(land_use.access_dist_transit, df[DESTINATION]) if 'access_dist_transit' in land_use else shortWalk"
,walk_transit_available,(_origin_distance_to_transit <= walkThresh) & (_destination_distance_to_transit <= walkThresh) & (_origin_distance_to_transit > 0) & (_destination_distance_to_transit > 0)
,walk_local_available,walk_transit_available & (odt_skims['WLK_LOC_WLK_TOTIVT']>0)
,walk_light_rail_available,walk_transit_available & (i_tour_mode >= 10) & (odt_skims['WLK_LR_WLK_KEYIVT']>0)
,walk_ferry_available,walk_transit_available & (i_tour_mode >= 11) & (odt_skims['WLK_FRY_WLK_KEYIVT']>0)
,walk_commuter_available,walk_transit_available & (i_tour_mode >= 12) & (odt_skims['WLK_COM_WLK_KEYIVT']>0) 
,drive_transit_available_outbound,(_destination_distance_to_transit <= walkThresh) & df.outbound & (odt_skims['DRV_TRN_WLK_TOTIVT']>0)
,drive_transit_available_inbound,(_origin_distance_to_transit <= walkThresh) & ~df.outbound & (odt_skims['WLK_TRN_DRV_TOTIVT']>0)
,origin_walk_time,_origin_distance_to_transit*60/walkSpeed
,destination_walk_time,_destination_distance_to_transit*60/walkSpeed
# RIDEHAIL,,
,origin_density_measure,"(reindex(land_use.TOTPOP, df[orig_col_name]) + reindex(land_use.TOTEMP, df[orig_col_name])) / (reindex(land_use.TOTACRE, df[orig_col_name]) / 640)"
,origin_density,"pd.cut(origin_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)"
,origin_zone_taxi_wait_time_mean,"origin_density.map({k: v for k, v in Taxi_waitTime_mean.items()})"
,origin_zone_taxi_wait_time_sd,"origin_density.map({k: v for k, v in Taxi_waitTime_sd.items()})"
# Note that the mean and standard deviation are not the values for the distribution itself, but of the underlying normal distribution it is derived from,
,origTaxiWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_taxi_wait_time_mean, sigma=origin_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_singleTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})"
,origin_zone_singleTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})"
,origSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_singleTNC_wait_time_mean, sigma=origin_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_sharedTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})"
,origin_zone_sharedTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})"
,origSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_sharedTNC_wait_time_mean, sigma=origin_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,SCHBUS_available,(df.tour_type =='school') & (df.ptype!=3)
Tour mode is school bus,tourSchBus,(df.tour_mode == 'SCH_BUS').astype(int)
#,,
#,od_dist_walk,od_skims['DISTWALK']
#,do_dist_walk,od_skims.reverse('DISTWALK')
#,max_dist_walk,od_skims.max('DISTWALK')
#,dist_bike,od_skims['DISTBIKE']
#,dist_only,od_skims['DIST']
